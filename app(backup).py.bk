import os
import time
import streamlit as st
#from streamlit_google_oauth import GoogleAuth
from dotenv import load_dotenv
from datetime import datetime
import pandas as pd
import logging
from typing import Optional, List


from PIL import Image
import base64

# st.title("login")

# if not st.user.is_logged_in:
#     if st.button("Log in"):
#         st.login("google")
# else:
#     if st.button("Log out"):
#         st.logout()
#     st.write(f"Hello, {st.user.name}!")
    
# st.json(st.user)
# Initialize session state for login/logout tracking
# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


if 'login_logs' not in st.session_state:
    st.session_state.login_logs = pd.DataFrame(columns=['timestamp', 'user_email', 'action'])

def log_auth_action(email: str, action: str):
    """Log authentication actions (login/logout) with timestamp directly to CSV file.
    Creates new file if it doesn't exist, otherwise appends to existing file.
    
    Args:
        email (str): User's email address
        action (str): Either 'login' or 'logout'
    """
    import os
    from datetime import datetime
    import pandas as pd
    
    # Create new log entry
    new_log = {
        'timestamp': datetime.now(),
        'user_email': email,
        'action': action
    }
    
    # Convert to DataFrame
    new_log_df = pd.DataFrame([new_log])
    
    # File path
    log_file = 'auth_logs.csv'
    
    try:
        if os.path.exists(log_file):
            # Append to existing file
            existing_logs = pd.read_csv(log_file)
            updated_logs = pd.concat([existing_logs, new_log_df], ignore_index=True)
            updated_logs.to_csv(log_file, index=False)
        else:
            # Create new file
            new_log_df.to_csv(log_file, index=False)
    except Exception as e:
        print(f"Error writing to log file: {str(e)}")
                
def show_user_profile():
    # Custom CSS for the profile dropdown
    st.markdown("""
    <style>
        .profile-container {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
        }
        .profile-pic {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
            cursor: pointer;
            transition: transform 0.3s;
        }
        .show {display: block;}
    </style>
    """, unsafe_allow_html=True)
        # JavaScript for dropdown toggle
        
    # Sidebar profile & logout section
    with st.sidebar:
        st.markdown(f"""
        <div class="profile-container">
            <img src="{st.user.get('picture', '')}" 
                 class="profile-pic" 
                 alt="Profile">
            <div>{st.user.get('name', 'User')}</div>
        </div>
        """, unsafe_allow_html=True)
                
def show_logout_button():
    # Sidebar logout section
    with st.sidebar:
        # Hidden logout button that gets triggered by JavaScript
        if st.button("Logout", help="Click to logout", type="primary", use_container_width=True):
            if hasattr(st, 'user') and st.user is not None:
                log_auth_action(st.user.email, 'logout')  # Log the logout
            st.logout()
            st.rerun()

def login_xx():
    st.markdown('<h1 class="title pulse">Welcome to Jeron.AI</h1>', unsafe_allow_html=True)
    st.markdown('<h3 class="title pulse">Welcome to Jeron.AI</h3>', unsafe_allow_html=True)
    if st.button("Log in"):
        try:
            st.login("google")
            #st.session_state.logged_in = True
            # Check if login was successful
            # if hasattr(st, 'user') and st.user is not None:
            #     log_auth_action(st.user.email, 'login')  # Log the login
            #     logger.info(f"User {st.user.email} logged in successfully")
            #     st.rerun()  # Refresh to update UI
            # else:
            #     st.error("Login failed - no user data received")
        except Exception as e:
            st.error(f"Login failed: {str(e)}")
            
        # if hasattr(st, 'user') and st.user is not None:
        #     log_auth_action(st.user.email, 'login')  # Log the login
        #     logger.info(f"{st.user.email}")

# Custom CSS for styling
def set_custom_css():
    st.markdown(f"""
    <style>
        .login-container {{
            display: flex;
            min-height: 100vh;
        }}
        .auth-section {{
            flex: 1;
            padding: 2rem;
            display: flex;
            flex-direction: column;
            justify-content: center;
            max-width: 500px;
        }}
        .banner-section {{
            flex: 1;
            background-image: url("data:image/jpg;base64,{get_image_base64('banner.jpg')}");
            background-size: cover;
            background-position: center;
        }}
        .google-btn {{
            display: flex;
            align-items: center;
            justify-content: center;
            background: #000000;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            margin: 10px 0;
        }}
        .google-btn img {{
            width: 20px;
            margin-right: 10px;
        }}
        .divider {{
            display: flex;
            align-items: center;
            margin: 20px 0;
        }}
        .divider::before, .divider::after {{
            content: "";
            flex: 1;
            border-bottom: 1px solid #ddd;
        }}
        .divider-text {{
            padding: 0 10px;
            color: #777;
        }}
        @media (max-width: 768px) {{
            .login-container {{
                flex-direction: column;
            }}
            .banner-section {{
                display: none;
            }}
        }}
    </style>
    """, unsafe_allow_html=True)

def get_image_base64(image_path):
    """Convert image to base64 for embedding in CSS"""
    try:
        with open(image_path, "rb") as img_file:
            return base64.b64encode(img_file.read()).decode('utf-8')
    except:
        return ""
# --- Authentication Functions ---
def handle_google_login():
    """Handle Google login using Streamlit's native method"""
    if not st.user.is_logged_in:
        # Create a custom Google login button
        st.markdown("""
        <button onclick="window.parent.postMessage('streamlit:login', '*')" 
                class="google-btn">
            <img src="https://upload.wikimedia.org/wikipedia/commons/c/c1/Google_%22G%22_logo.svg" 
                 style="width:20px; margin-right:10px;"/>
            Sign in with Google
        </button>
        """, unsafe_allow_html=True)
        
        # This will trigger the actual Google auth flow
        # st.login("google")
    else:
        st.success(f"Welcome {st.user.name}!")

def handle_user_login():
    """User login form"""
    with st.form("user_login"):
        username = st.text_input("User Name")
        password = st.text_input("Password", type="password")
        submitted = st.form_submit_button("Sign In")
        
        if submitted:
            # Add your authentication logic here
            if username == "admin" and password == "password":  # Demo only
                st.session_state.user = {"admin": username, "name": "Demo User"}
                st.success("Login successful!")
                st.user.is_logged_in = True
                st.rerun()
            else:
                st.error("Invalid credentials")
                
def login():
    set_custom_css()
    
    # Two-column layout
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("""
        <div class="auth-section">
            <h1 style="font-size: 2rem;">Welcome to Jeron.AI</h1>
            <p style="color: #666; margin-bottom: 2rem;">Sign in to access your account</p>
        """, unsafe_allow_html=True)
        
        # Google Login
        handle_google_login()
        
        # Divider
        st.markdown("""
        <div class="divider">
            <span class="divider-text">OR</span>
        </div>
        """, unsafe_allow_html=True)
        
        # User Login
        handle_user_login()
        
        # Links
        st.markdown("""
        <div style="text-align: center; margin-top: 1rem;">
            <a href="#" style="color: #4285F4; text-decoration: none; margin-right: 1rem;">Forgot password?</a>
            <a href="#" style="color: #4285F4; text-decoration: none;">Create account</a>
        </div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        # Banner section (shown only on desktop)
        st.markdown("""
        <div class="banner-section"></div>
        """, unsafe_allow_html=True)

def logout():
    if st.button("Log out"):
        st.logout()
        #st.session_state.logged_in = False
        st.rerun()

def main():
    # if "logged_in" not in st.session_state:
    #     st.session_state.logged_in = False
    st.session_state.logfile = True
        
    login_page = st.Page(login, title="Log in")
    logout_page = st.Page(logout, title="Log out")

    #st.sidebar.markdown("Welcome to Jeron.AI", unsafe_allow_html=True)
    search = st.Page("pages/1_üîç_Search.py", title="Search")
    searchhistory = st.Page("pages/7_üìú_SearchHistory.py", title="Search History")
    setup = st.Page("pages/2_‚öôÔ∏è_Configuration.py", title="Setup")
    about = st.Page("pages/4_‚ÑπÔ∏è_About.py", title="About")
    methodology = st.Page("pages/5_üî¨_Methodology.py", title="Methodology")
    troubleshooting = st.Page("pages/6_üõ†Ô∏è_Troubleshooting.py", title="Troubleshooting")
    
    if st.user.is_logged_in:
        # if st.session_state.logfile:
        #     logger.info(f"User {st.user.email} logged in successfully")
        #     st.session_state.logfile = False
        # else:
        #     pass
        #log_auth_action(st.user.email, 'login')  # Log the login
        pg = st.navigation(
            {
                #"Account": [logout_page],
                # "Reports": [dashboard, bugs, alerts],
                "Tools": [search, searchhistory, setup, troubleshooting],
                "Info": [about, methodology]
            }
        )
        
    else:
        pg = st.navigation([login_page])

    pg.run()
    #show_user_profile()
    if st.user.is_logged_in:
        show_user_profile()
        show_logout_button()
    else:
        pass
    #if st.session_state.logged_in:
       
        
if __name__ == "__main__":
    main()
    

